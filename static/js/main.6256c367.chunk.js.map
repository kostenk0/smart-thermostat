{"version":3,"sources":["img/air-conditioner.png","img/fan.png","img/heater.png","App.js","reportWebVitals.js","index.js"],"names":["minNormal","maxNormal","App","useState","automatic","setAutomatic","tempOutside","setTempOutside","tempInside","setTempInside","conditioner","setConditioner","fan","setFan","heater","setHeater","useEffect","outside","inside","Navbar","bg","variant","sticky","Brand","href","Collapse","className","Text","ButtonGroup","Button","type","onClick","Container","fluid","Row","Col","Card","Body","Img","src","conditionerIcon","Title","disabled","heaterIcon","fanIcon","classname","Header","as","ListGroup","Item","Form","Control","value","onChange","e","target","custom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6256c367.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/air-conditioner.6dc260d6.png\";","export default __webpack_public_path__ + \"static/media/fan.9b0556b4.png\";","export default __webpack_public_path__ + \"static/media/heater.913ca510.png\";","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport conditionerIcon from './img/air-conditioner.png';\nimport fanIcon from './img/fan.png';\nimport heaterIcon from './img/heater.png';\nimport { Navbar, Button, ButtonGroup, Container, Row, Col, Card, ListGroup, Form } from 'react-bootstrap';\n\nconst minNormal = 18;\nconst maxNormal = 24;\nfunction App() {\n  const [automatic, setAutomatic] = useState(true);\n  const [tempOutside, setTempOutside] = useState(60);\n  const [tempInside, setTempInside] = useState(65);\n\n  const [conditioner, setConditioner] = useState(false);\n  const [fan, setFan] = useState(false);\n  const [heater, setHeater] = useState(true);\n\n  useEffect(() => {\n    if (automatic) {\n      let outside = tempOutside - 40;\n      let inside = tempInside - 40;\n      if (outside > maxNormal && inside > maxNormal) {\n        setConditioner(true);\n        setFan(true);\n        setHeater(false);\n      } else if (outside <= minNormal && inside > maxNormal) {\n        setConditioner(false);\n        setFan(false);\n        setHeater(false);\n      } else if (outside <= maxNormal && outside >= minNormal && inside > maxNormal) {\n        setConditioner(true);\n        setFan(true);\n        setHeater(false);\n      }\n\n      else if (outside > maxNormal && inside <= maxNormal && inside >= minNormal) {\n        setConditioner(false);\n        setFan(false);\n        setHeater(false);\n      } else if (outside <= minNormal && inside <= maxNormal && inside >= minNormal) {\n        setConditioner(false);\n        setFan(false);\n        setHeater(false);\n      } else if (outside <= maxNormal && outside >= minNormal && inside <= maxNormal && inside >= minNormal) {\n        setConditioner(false);\n        setFan(false);\n        setHeater(false);\n      }\n\n      else if (outside > maxNormal && inside < minNormal) {\n        setConditioner(false);\n        setFan(false);\n        setHeater(false);\n      } else if (outside <= minNormal && inside < minNormal) {\n        setConditioner(false);\n        setFan(false);\n        setHeater(true);\n      } else if (outside <= maxNormal && outside >= minNormal && inside < minNormal) {\n        setConditioner(false);\n        setFan(false);\n        setHeater(false);\n      }\n    }\n\n  }, [tempOutside, tempInside, automatic]);\n\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\" >\n        <Navbar.Brand href=\"#home\">\n          Розумний термостат\n      </Navbar.Brand>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Navbar.Text>\n            Розумний режим: &nbsp;\n        </Navbar.Text>\n          <ButtonGroup>\n            <Button type=\"button\"\n              className={\"btn \" + (automatic ? \"btn-primary\" : \"btn-light\")}\n              onClick={() => setAutomatic(true)}\n            >Увімкнути</Button>\n            <Button type=\"button\"\n              className={\"btn \" + (automatic ? \"btn-light\" : \"btn-primary\")}\n              onClick={() => setAutomatic(false)}\n            >Вимкнути</Button>\n          </ButtonGroup>\n        </Navbar.Collapse>\n      </Navbar>\n      <Container fluid>\n        <Row>\n          <Col>\n            <Card className=\"text-center\">\n              <Card.Body>\n                <h3>\n                  Всередині:\n                  &nbsp;\n                  &#9728;\n                  {tempInside - 40}\n                  &#8451;\n                  &nbsp;\n                  &#9729;\n                  60%\n                </h3>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col>\n            <Card className=\"text-center\" >\n              <Card.Body>\n                <h3>\n                  Ззовні:\n                  &nbsp;\n                  &#9728;\n                  {tempOutside - 40}\n                  &#8451;\n                  &nbsp;\n                  &#9729;\n                  60%\n                </h3>\n              </Card.Body>\n            </Card></Col>\n        </Row>\n        <Row>\n          <Col>\n            <Card className=\"text-center\" bg='light'>\n              <Card.Img variant=\"top\" src={conditionerIcon} />\n              <Card.Body>\n                <Card.Title>Кондиціонер</Card.Title>\n                <Button\n                  type=\"button\"\n                  disabled={automatic}\n                  className={\"btn \" + (conditioner ? \"btn-primary\" : \"btn-light\")}\n                  onClick={() => setConditioner(true)}\n                >\n                  Увімкнути\n                      </Button>\n                <Button\n                  type=\"button\"\n                  disabled={automatic}\n                  className={\"btn \" + (!conditioner ? \"btn-primary\" : \"btn-light\")}\n                  onClick={() => setConditioner(false)}\n                >\n                  Вимкнути\n                      </Button>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col>\n            <Card className=\"text-center\" bg='light'>\n              <Card.Img variant=\"top\" src={heaterIcon} />\n              <Card.Body>\n                <Card.Title>Обігрівач</Card.Title>\n                <Button\n                  type=\"button\"\n                  disabled={automatic}\n                  className={\"btn \" + (heater ? \"btn-primary\" : \"btn-light\")}\n                  onClick={() => setHeater(true)}\n                >\n                  Увімкнути\n                      </Button>\n                <Button\n                  type=\"button\"\n                  disabled={automatic}\n                  className={\"btn \" + (!heater ? \"btn-primary\" : \"btn-light\")}\n                  onClick={() => setHeater(false)}\n                >\n                  Вимкнути\n                      </Button>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col>\n            <Card className=\"text-center\" bg='light'>\n              <Card.Img variant=\"top\" src={fanIcon} />\n              <Card.Body>\n                <Card.Title>Вентилятор</Card.Title>\n                <Button\n                  type=\"button\"\n                  disabled={automatic}\n                  className={\"btn \" + (fan ? \"btn-primary\" : \"btn-light\")}\n                  onClick={() => setFan(true)}\n                >\n                  Увімкнути\n                      </Button>\n                <Button\n                  type=\"button\"\n                  disabled={automatic}\n                  className={\"btn \" + (!fan ? \"btn-primary\" : \"btn-light\")}\n                  onClick={() => setFan(false)}\n                >\n                  Вимкнути\n                      </Button>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Card classname=\"text-center\">\n              <Card.Header as=\"h2\">Симуляція</Card.Header>\n              <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <h3>\n                    Всередині:\n                    &nbsp;\n                    &#9728;\n                  {tempInside - 40}\n                  &#8451;\n                </h3>\n                  <Form.Control value={tempInside} onChange={(e) => { setTempInside(e.target.value) }} type=\"range\" custom />\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <h3>\n                    Ззовні:\n                    &nbsp;\n                    &#9728;\n                  {tempOutside - 40}\n                  &#8451;\n                </h3>\n                  <Form.Control value={tempOutside} onChange={(e) => { setTempOutside(e.target.value) }} type=\"range\" custom />\n                </ListGroup.Item>\n              </ListGroup>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}